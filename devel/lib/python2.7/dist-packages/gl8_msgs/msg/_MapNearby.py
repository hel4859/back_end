# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gl8_msgs/MapNearby.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gl8_msgs.msg
import std_msgs.msg

class MapNearby(genpy.Message):
  _md5sum = "4bdfa622e60bd6bfe837b9b8ca5046e7"
  _type = "gl8_msgs/MapNearby"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
bool status
std_msgs/MultiArrayLayout layout
RoadSegment[] road

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: gl8_msgs/RoadSegment
bool type 
# if the road segment is line, the value of type is 0;
# if the road segment is curve, the value of type is 1; 
float64 length
Point2D origin
Point2D terminus
# below parameters are for curve segments
# if the road turns counterclockwise, then turn_direction is 0
# if the road turns clockwise, then turn_direction is 1
bool turn_direction
Point2D center
float64 radius
Vector2 start_direction
Vector2 end_direction




================================================================================
MSG: gl8_msgs/Point2D
float64 x
float64 y

================================================================================
MSG: gl8_msgs/Vector2
float64 x
float64 y
"""
  __slots__ = ['header','status','layout','road']
  _slot_types = ['std_msgs/Header','bool','std_msgs/MultiArrayLayout','gl8_msgs/RoadSegment[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,layout,road

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapNearby, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = False
      if self.layout is None:
        self.layout = std_msgs.msg.MultiArrayLayout()
      if self.road is None:
        self.road = []
    else:
      self.header = std_msgs.msg.Header()
      self.status = False
      self.layout = std_msgs.msg.MultiArrayLayout()
      self.road = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.status))
      length = len(self.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.size, _x.stride))
      buff.write(_struct_I.pack(self.layout.data_offset))
      length = len(self.road)
      buff.write(_struct_I.pack(length))
      for val1 in self.road:
        _x = val1
        buff.write(_struct_Bd.pack(_x.type, _x.length))
        _v1 = val1.origin
        _x = _v1
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _v2 = val1.terminus
        _x = _v2
        buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_B.pack(val1.turn_direction))
        _v3 = val1.center
        _x = _v3
        buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_d.pack(val1.radius))
        _v4 = val1.start_direction
        _x = _v4
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _v5 = val1.end_direction
        _x = _v5
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.layout is None:
        self.layout = std_msgs.msg.MultiArrayLayout()
      if self.road is None:
        self.road = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.status,) = _struct_B.unpack(str[start:end])
      self.status = bool(self.status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
        self.layout.dim.append(val1)
      start = end
      end += 4
      (self.layout.data_offset,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road = []
      for i in range(0, length):
        val1 = gl8_msgs.msg.RoadSegment()
        _x = val1
        start = end
        end += 9
        (_x.type, _x.length,) = _struct_Bd.unpack(str[start:end])
        val1.type = bool(val1.type)
        _v6 = val1.origin
        _x = _v6
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _v7 = val1.terminus
        _x = _v7
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 1
        (val1.turn_direction,) = _struct_B.unpack(str[start:end])
        val1.turn_direction = bool(val1.turn_direction)
        _v8 = val1.center
        _x = _v8
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _struct_d.unpack(str[start:end])
        _v9 = val1.start_direction
        _x = _v9
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _v10 = val1.end_direction
        _x = _v10
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.road.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.status))
      length = len(self.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.size, _x.stride))
      buff.write(_struct_I.pack(self.layout.data_offset))
      length = len(self.road)
      buff.write(_struct_I.pack(length))
      for val1 in self.road:
        _x = val1
        buff.write(_struct_Bd.pack(_x.type, _x.length))
        _v11 = val1.origin
        _x = _v11
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _v12 = val1.terminus
        _x = _v12
        buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_B.pack(val1.turn_direction))
        _v13 = val1.center
        _x = _v13
        buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_d.pack(val1.radius))
        _v14 = val1.start_direction
        _x = _v14
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _v15 = val1.end_direction
        _x = _v15
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.layout is None:
        self.layout = std_msgs.msg.MultiArrayLayout()
      if self.road is None:
        self.road = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.status,) = _struct_B.unpack(str[start:end])
      self.status = bool(self.status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
        self.layout.dim.append(val1)
      start = end
      end += 4
      (self.layout.data_offset,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road = []
      for i in range(0, length):
        val1 = gl8_msgs.msg.RoadSegment()
        _x = val1
        start = end
        end += 9
        (_x.type, _x.length,) = _struct_Bd.unpack(str[start:end])
        val1.type = bool(val1.type)
        _v16 = val1.origin
        _x = _v16
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _v17 = val1.terminus
        _x = _v17
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 1
        (val1.turn_direction,) = _struct_B.unpack(str[start:end])
        val1.turn_direction = bool(val1.turn_direction)
        _v18 = val1.center
        _x = _v18
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _struct_d.unpack(str[start:end])
        _v19 = val1.start_direction
        _x = _v19
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _v20 = val1.end_direction
        _x = _v20
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.road.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
