# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gl8_msgs/RoadSegment.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gl8_msgs.msg

class RoadSegment(genpy.Message):
  _md5sum = "66a128b28bfec83dd3150626355d56af"
  _type = "gl8_msgs/RoadSegment"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool type 
# if the road segment is line, the value of type is 0;
# if the road segment is curve, the value of type is 1; 
float64 length
Point2D origin
Point2D terminus
# below parameters are for curve segments
# if the road turns counterclockwise, then turn_direction is 0
# if the road turns clockwise, then turn_direction is 1
bool turn_direction
Point2D center
float64 radius
Vector2 start_direction
Vector2 end_direction




================================================================================
MSG: gl8_msgs/Point2D
float64 x
float64 y

================================================================================
MSG: gl8_msgs/Vector2
float64 x
float64 y
"""
  __slots__ = ['type','length','origin','terminus','turn_direction','center','radius','start_direction','end_direction']
  _slot_types = ['bool','float64','gl8_msgs/Point2D','gl8_msgs/Point2D','bool','gl8_msgs/Point2D','float64','gl8_msgs/Vector2','gl8_msgs/Vector2']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,length,origin,terminus,turn_direction,center,radius,start_direction,end_direction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoadSegment, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = False
      if self.length is None:
        self.length = 0.
      if self.origin is None:
        self.origin = gl8_msgs.msg.Point2D()
      if self.terminus is None:
        self.terminus = gl8_msgs.msg.Point2D()
      if self.turn_direction is None:
        self.turn_direction = False
      if self.center is None:
        self.center = gl8_msgs.msg.Point2D()
      if self.radius is None:
        self.radius = 0.
      if self.start_direction is None:
        self.start_direction = gl8_msgs.msg.Vector2()
      if self.end_direction is None:
        self.end_direction = gl8_msgs.msg.Vector2()
    else:
      self.type = False
      self.length = 0.
      self.origin = gl8_msgs.msg.Point2D()
      self.terminus = gl8_msgs.msg.Point2D()
      self.turn_direction = False
      self.center = gl8_msgs.msg.Point2D()
      self.radius = 0.
      self.start_direction = gl8_msgs.msg.Vector2()
      self.end_direction = gl8_msgs.msg.Vector2()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B5dB7d.pack(_x.type, _x.length, _x.origin.x, _x.origin.y, _x.terminus.x, _x.terminus.y, _x.turn_direction, _x.center.x, _x.center.y, _x.radius, _x.start_direction.x, _x.start_direction.y, _x.end_direction.x, _x.end_direction.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.origin is None:
        self.origin = gl8_msgs.msg.Point2D()
      if self.terminus is None:
        self.terminus = gl8_msgs.msg.Point2D()
      if self.center is None:
        self.center = gl8_msgs.msg.Point2D()
      if self.start_direction is None:
        self.start_direction = gl8_msgs.msg.Vector2()
      if self.end_direction is None:
        self.end_direction = gl8_msgs.msg.Vector2()
      end = 0
      _x = self
      start = end
      end += 98
      (_x.type, _x.length, _x.origin.x, _x.origin.y, _x.terminus.x, _x.terminus.y, _x.turn_direction, _x.center.x, _x.center.y, _x.radius, _x.start_direction.x, _x.start_direction.y, _x.end_direction.x, _x.end_direction.y,) = _struct_B5dB7d.unpack(str[start:end])
      self.type = bool(self.type)
      self.turn_direction = bool(self.turn_direction)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B5dB7d.pack(_x.type, _x.length, _x.origin.x, _x.origin.y, _x.terminus.x, _x.terminus.y, _x.turn_direction, _x.center.x, _x.center.y, _x.radius, _x.start_direction.x, _x.start_direction.y, _x.end_direction.x, _x.end_direction.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.origin is None:
        self.origin = gl8_msgs.msg.Point2D()
      if self.terminus is None:
        self.terminus = gl8_msgs.msg.Point2D()
      if self.center is None:
        self.center = gl8_msgs.msg.Point2D()
      if self.start_direction is None:
        self.start_direction = gl8_msgs.msg.Vector2()
      if self.end_direction is None:
        self.end_direction = gl8_msgs.msg.Vector2()
      end = 0
      _x = self
      start = end
      end += 98
      (_x.type, _x.length, _x.origin.x, _x.origin.y, _x.terminus.x, _x.terminus.y, _x.turn_direction, _x.center.x, _x.center.y, _x.radius, _x.start_direction.x, _x.start_direction.y, _x.end_direction.x, _x.end_direction.y,) = _struct_B5dB7d.unpack(str[start:end])
      self.type = bool(self.type)
      self.turn_direction = bool(self.turn_direction)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B5dB7d = struct.Struct("<B5dB7d")
