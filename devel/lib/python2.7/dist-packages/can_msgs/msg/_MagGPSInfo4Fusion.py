# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from can_msgs/MagGPSInfo4Fusion.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class MagGPSInfo4Fusion(genpy.Message):
  _md5sum = "49e8bcc1ce79d983333e55c4b60b9ab1"
  _type = "can_msgs/MagGPSInfo4Fusion"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
time TimeOfIssue

float32 MagOffsetFromMiddle
int32   Cnt
int32   task_id
int32   link_id
int32   ForceUpdate
int32   Polarity
int32   PolarityCode

float32[] AdjMagnetArray




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','TimeOfIssue','MagOffsetFromMiddle','Cnt','task_id','link_id','ForceUpdate','Polarity','PolarityCode','AdjMagnetArray']
  _slot_types = ['std_msgs/Header','time','float32','int32','int32','int32','int32','int32','int32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,TimeOfIssue,MagOffsetFromMiddle,Cnt,task_id,link_id,ForceUpdate,Polarity,PolarityCode,AdjMagnetArray

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MagGPSInfo4Fusion, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.TimeOfIssue is None:
        self.TimeOfIssue = genpy.Time()
      if self.MagOffsetFromMiddle is None:
        self.MagOffsetFromMiddle = 0.
      if self.Cnt is None:
        self.Cnt = 0
      if self.task_id is None:
        self.task_id = 0
      if self.link_id is None:
        self.link_id = 0
      if self.ForceUpdate is None:
        self.ForceUpdate = 0
      if self.Polarity is None:
        self.Polarity = 0
      if self.PolarityCode is None:
        self.PolarityCode = 0
      if self.AdjMagnetArray is None:
        self.AdjMagnetArray = []
    else:
      self.header = std_msgs.msg.Header()
      self.TimeOfIssue = genpy.Time()
      self.MagOffsetFromMiddle = 0.
      self.Cnt = 0
      self.task_id = 0
      self.link_id = 0
      self.ForceUpdate = 0
      self.Polarity = 0
      self.PolarityCode = 0
      self.AdjMagnetArray = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2If6i.pack(_x.TimeOfIssue.secs, _x.TimeOfIssue.nsecs, _x.MagOffsetFromMiddle, _x.Cnt, _x.task_id, _x.link_id, _x.ForceUpdate, _x.Polarity, _x.PolarityCode))
      length = len(self.AdjMagnetArray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.AdjMagnetArray))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.TimeOfIssue is None:
        self.TimeOfIssue = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.TimeOfIssue.secs, _x.TimeOfIssue.nsecs, _x.MagOffsetFromMiddle, _x.Cnt, _x.task_id, _x.link_id, _x.ForceUpdate, _x.Polarity, _x.PolarityCode,) = _struct_2If6i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.AdjMagnetArray = struct.unpack(pattern, str[start:end])
      self.TimeOfIssue.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2If6i.pack(_x.TimeOfIssue.secs, _x.TimeOfIssue.nsecs, _x.MagOffsetFromMiddle, _x.Cnt, _x.task_id, _x.link_id, _x.ForceUpdate, _x.Polarity, _x.PolarityCode))
      length = len(self.AdjMagnetArray)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.AdjMagnetArray.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.TimeOfIssue is None:
        self.TimeOfIssue = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.TimeOfIssue.secs, _x.TimeOfIssue.nsecs, _x.MagOffsetFromMiddle, _x.Cnt, _x.task_id, _x.link_id, _x.ForceUpdate, _x.Polarity, _x.PolarityCode,) = _struct_2If6i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.AdjMagnetArray = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      self.TimeOfIssue.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2If6i = struct.Struct("<2If6i")
_struct_3I = struct.Struct("<3I")
