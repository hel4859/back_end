# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tiggo_msgs/CruiseState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CruiseState(genpy.Message):
  _md5sum = "6aa8783593a8ba8aa98f92f8d36a68f0"
  _type = "tiggo_msgs/CruiseState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 vaild
bool front_safe
bool left_safe
bool right_safe
bool have_map
int8 have_lane
int8 have_curb
int8 lane_change_state
  
"""
  __slots__ = ['vaild','front_safe','left_safe','right_safe','have_map','have_lane','have_curb','lane_change_state']
  _slot_types = ['int8','bool','bool','bool','bool','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vaild,front_safe,left_safe,right_safe,have_map,have_lane,have_curb,lane_change_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CruiseState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vaild is None:
        self.vaild = 0
      if self.front_safe is None:
        self.front_safe = False
      if self.left_safe is None:
        self.left_safe = False
      if self.right_safe is None:
        self.right_safe = False
      if self.have_map is None:
        self.have_map = False
      if self.have_lane is None:
        self.have_lane = 0
      if self.have_curb is None:
        self.have_curb = 0
      if self.lane_change_state is None:
        self.lane_change_state = 0
    else:
      self.vaild = 0
      self.front_safe = False
      self.left_safe = False
      self.right_safe = False
      self.have_map = False
      self.have_lane = 0
      self.have_curb = 0
      self.lane_change_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b4B3b.pack(_x.vaild, _x.front_safe, _x.left_safe, _x.right_safe, _x.have_map, _x.have_lane, _x.have_curb, _x.lane_change_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.vaild, _x.front_safe, _x.left_safe, _x.right_safe, _x.have_map, _x.have_lane, _x.have_curb, _x.lane_change_state,) = _struct_b4B3b.unpack(str[start:end])
      self.front_safe = bool(self.front_safe)
      self.left_safe = bool(self.left_safe)
      self.right_safe = bool(self.right_safe)
      self.have_map = bool(self.have_map)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b4B3b.pack(_x.vaild, _x.front_safe, _x.left_safe, _x.right_safe, _x.have_map, _x.have_lane, _x.have_curb, _x.lane_change_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.vaild, _x.front_safe, _x.left_safe, _x.right_safe, _x.have_map, _x.have_lane, _x.have_curb, _x.lane_change_state,) = _struct_b4B3b.unpack(str[start:end])
      self.front_safe = bool(self.front_safe)
      self.left_safe = bool(self.left_safe)
      self.right_safe = bool(self.right_safe)
      self.have_map = bool(self.have_map)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b4B3b = struct.Struct("<b4B3b")
