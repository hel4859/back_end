# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tiggo_msgs/Line2f.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tiggo_msgs.msg

class Line2f(genpy.Message):
  _md5sum = "31da709181b047fe7aaf9f5ea4997c40"
  _type = "tiggo_msgs/Line2f"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 vaild
Point2f pt0
Point2f pt1
float64 slope
float64 angle
float64 len

================================================================================
MSG: tiggo_msgs/Point2f
float32 x
float32 y
"""
  __slots__ = ['vaild','pt0','pt1','slope','angle','len']
  _slot_types = ['int8','tiggo_msgs/Point2f','tiggo_msgs/Point2f','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vaild,pt0,pt1,slope,angle,len

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Line2f, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vaild is None:
        self.vaild = 0
      if self.pt0 is None:
        self.pt0 = tiggo_msgs.msg.Point2f()
      if self.pt1 is None:
        self.pt1 = tiggo_msgs.msg.Point2f()
      if self.slope is None:
        self.slope = 0.
      if self.angle is None:
        self.angle = 0.
      if self.len is None:
        self.len = 0.
    else:
      self.vaild = 0
      self.pt0 = tiggo_msgs.msg.Point2f()
      self.pt1 = tiggo_msgs.msg.Point2f()
      self.slope = 0.
      self.angle = 0.
      self.len = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b4f3d.pack(_x.vaild, _x.pt0.x, _x.pt0.y, _x.pt1.x, _x.pt1.y, _x.slope, _x.angle, _x.len))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pt0 is None:
        self.pt0 = tiggo_msgs.msg.Point2f()
      if self.pt1 is None:
        self.pt1 = tiggo_msgs.msg.Point2f()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.vaild, _x.pt0.x, _x.pt0.y, _x.pt1.x, _x.pt1.y, _x.slope, _x.angle, _x.len,) = _struct_b4f3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b4f3d.pack(_x.vaild, _x.pt0.x, _x.pt0.y, _x.pt1.x, _x.pt1.y, _x.slope, _x.angle, _x.len))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pt0 is None:
        self.pt0 = tiggo_msgs.msg.Point2f()
      if self.pt1 is None:
        self.pt1 = tiggo_msgs.msg.Point2f()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.vaild, _x.pt0.x, _x.pt0.y, _x.pt1.x, _x.pt1.y, _x.slope, _x.angle, _x.len,) = _struct_b4f3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b4f3d = struct.Struct("<b4f3d")
