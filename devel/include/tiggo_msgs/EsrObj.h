// Generated by gencpp from file tiggo_msgs/EsrObj.msg
// DO NOT EDIT!


#ifndef TIGGO_MSGS_MESSAGE_ESROBJ_H
#define TIGGO_MSGS_MESSAGE_ESROBJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiggo_msgs
{
template <class ContainerAllocator>
struct EsrObj_
{
  typedef EsrObj_<ContainerAllocator> Type;

  EsrObj_()
    : track_status(0)
    , occupied_state(0)
    , x(0.0)
    , y(0.0)
    , rate(0.0)  {
    }
  EsrObj_(const ContainerAllocator& _alloc)
    : track_status(0)
    , occupied_state(0)
    , x(0.0)
    , y(0.0)
    , rate(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _track_status_type;
  _track_status_type track_status;

   typedef int8_t _occupied_state_type;
  _occupied_state_type occupied_state;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _rate_type;
  _rate_type rate;




  typedef boost::shared_ptr< ::tiggo_msgs::EsrObj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiggo_msgs::EsrObj_<ContainerAllocator> const> ConstPtr;

}; // struct EsrObj_

typedef ::tiggo_msgs::EsrObj_<std::allocator<void> > EsrObj;

typedef boost::shared_ptr< ::tiggo_msgs::EsrObj > EsrObjPtr;
typedef boost::shared_ptr< ::tiggo_msgs::EsrObj const> EsrObjConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiggo_msgs::EsrObj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiggo_msgs::EsrObj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tiggo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'tiggo_msgs': ['/home/hl/google/src/tiggo_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tiggo_msgs::EsrObj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiggo_msgs::EsrObj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiggo_msgs::EsrObj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiggo_msgs::EsrObj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiggo_msgs::EsrObj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiggo_msgs::EsrObj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiggo_msgs::EsrObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "358ec0c811c66c45c6e7a30e6d41fe51";
  }

  static const char* value(const ::tiggo_msgs::EsrObj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x358ec0c811c66c45ULL;
  static const uint64_t static_value2 = 0xc6e7a30e6d41fe51ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiggo_msgs::EsrObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiggo_msgs/EsrObj";
  }

  static const char* value(const ::tiggo_msgs::EsrObj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiggo_msgs::EsrObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 track_status\n\
int8 occupied_state\n\
float64 x\n\
float64 y\n\
float64 rate\n\
";
  }

  static const char* value(const ::tiggo_msgs::EsrObj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiggo_msgs::EsrObj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.track_status);
      stream.next(m.occupied_state);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrObj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiggo_msgs::EsrObj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiggo_msgs::EsrObj_<ContainerAllocator>& v)
  {
    s << indent << "track_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.track_status);
    s << indent << "occupied_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.occupied_state);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "rate: ";
    Printer<double>::stream(s, indent + "  ", v.rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIGGO_MSGS_MESSAGE_ESROBJ_H
