// Generated by gencpp from file tiggo_msgs/CruiseState.msg
// DO NOT EDIT!


#ifndef TIGGO_MSGS_MESSAGE_CRUISESTATE_H
#define TIGGO_MSGS_MESSAGE_CRUISESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiggo_msgs
{
template <class ContainerAllocator>
struct CruiseState_
{
  typedef CruiseState_<ContainerAllocator> Type;

  CruiseState_()
    : vaild(0)
    , front_safe(false)
    , left_safe(false)
    , right_safe(false)
    , have_map(false)
    , have_lane(0)
    , have_curb(0)
    , lane_change_state(0)  {
    }
  CruiseState_(const ContainerAllocator& _alloc)
    : vaild(0)
    , front_safe(false)
    , left_safe(false)
    , right_safe(false)
    , have_map(false)
    , have_lane(0)
    , have_curb(0)
    , lane_change_state(0)  {
  (void)_alloc;
    }



   typedef int8_t _vaild_type;
  _vaild_type vaild;

   typedef uint8_t _front_safe_type;
  _front_safe_type front_safe;

   typedef uint8_t _left_safe_type;
  _left_safe_type left_safe;

   typedef uint8_t _right_safe_type;
  _right_safe_type right_safe;

   typedef uint8_t _have_map_type;
  _have_map_type have_map;

   typedef int8_t _have_lane_type;
  _have_lane_type have_lane;

   typedef int8_t _have_curb_type;
  _have_curb_type have_curb;

   typedef int8_t _lane_change_state_type;
  _lane_change_state_type lane_change_state;




  typedef boost::shared_ptr< ::tiggo_msgs::CruiseState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiggo_msgs::CruiseState_<ContainerAllocator> const> ConstPtr;

}; // struct CruiseState_

typedef ::tiggo_msgs::CruiseState_<std::allocator<void> > CruiseState;

typedef boost::shared_ptr< ::tiggo_msgs::CruiseState > CruiseStatePtr;
typedef boost::shared_ptr< ::tiggo_msgs::CruiseState const> CruiseStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiggo_msgs::CruiseState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiggo_msgs::CruiseState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tiggo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'tiggo_msgs': ['/home/hl/google/src/tiggo_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tiggo_msgs::CruiseState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiggo_msgs::CruiseState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiggo_msgs::CruiseState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiggo_msgs::CruiseState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiggo_msgs::CruiseState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiggo_msgs::CruiseState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiggo_msgs::CruiseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6aa8783593a8ba8aa98f92f8d36a68f0";
  }

  static const char* value(const ::tiggo_msgs::CruiseState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6aa8783593a8ba8aULL;
  static const uint64_t static_value2 = 0xa98f92f8d36a68f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiggo_msgs::CruiseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiggo_msgs/CruiseState";
  }

  static const char* value(const ::tiggo_msgs::CruiseState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiggo_msgs::CruiseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 vaild\n\
bool front_safe\n\
bool left_safe\n\
bool right_safe\n\
bool have_map\n\
int8 have_lane\n\
int8 have_curb\n\
int8 lane_change_state\n\
  \n\
";
  }

  static const char* value(const ::tiggo_msgs::CruiseState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiggo_msgs::CruiseState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vaild);
      stream.next(m.front_safe);
      stream.next(m.left_safe);
      stream.next(m.right_safe);
      stream.next(m.have_map);
      stream.next(m.have_lane);
      stream.next(m.have_curb);
      stream.next(m.lane_change_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CruiseState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiggo_msgs::CruiseState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiggo_msgs::CruiseState_<ContainerAllocator>& v)
  {
    s << indent << "vaild: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vaild);
    s << indent << "front_safe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_safe);
    s << indent << "left_safe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_safe);
    s << indent << "right_safe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_safe);
    s << indent << "have_map: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.have_map);
    s << indent << "have_lane: ";
    Printer<int8_t>::stream(s, indent + "  ", v.have_lane);
    s << indent << "have_curb: ";
    Printer<int8_t>::stream(s, indent + "  ", v.have_curb);
    s << indent << "lane_change_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lane_change_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIGGO_MSGS_MESSAGE_CRUISESTATE_H
