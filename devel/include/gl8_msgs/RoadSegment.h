// Generated by gencpp from file gl8_msgs/RoadSegment.msg
// DO NOT EDIT!


#ifndef GL8_MSGS_MESSAGE_ROADSEGMENT_H
#define GL8_MSGS_MESSAGE_ROADSEGMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gl8_msgs/Point2D.h>
#include <gl8_msgs/Point2D.h>
#include <gl8_msgs/Point2D.h>
#include <gl8_msgs/Vector2.h>
#include <gl8_msgs/Vector2.h>

namespace gl8_msgs
{
template <class ContainerAllocator>
struct RoadSegment_
{
  typedef RoadSegment_<ContainerAllocator> Type;

  RoadSegment_()
    : type(false)
    , length(0.0)
    , origin()
    , terminus()
    , turn_direction(false)
    , center()
    , radius(0.0)
    , start_direction()
    , end_direction()  {
    }
  RoadSegment_(const ContainerAllocator& _alloc)
    : type(false)
    , length(0.0)
    , origin(_alloc)
    , terminus(_alloc)
    , turn_direction(false)
    , center(_alloc)
    , radius(0.0)
    , start_direction(_alloc)
    , end_direction(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef double _length_type;
  _length_type length;

   typedef  ::gl8_msgs::Point2D_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef  ::gl8_msgs::Point2D_<ContainerAllocator>  _terminus_type;
  _terminus_type terminus;

   typedef uint8_t _turn_direction_type;
  _turn_direction_type turn_direction;

   typedef  ::gl8_msgs::Point2D_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef double _radius_type;
  _radius_type radius;

   typedef  ::gl8_msgs::Vector2_<ContainerAllocator>  _start_direction_type;
  _start_direction_type start_direction;

   typedef  ::gl8_msgs::Vector2_<ContainerAllocator>  _end_direction_type;
  _end_direction_type end_direction;




  typedef boost::shared_ptr< ::gl8_msgs::RoadSegment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gl8_msgs::RoadSegment_<ContainerAllocator> const> ConstPtr;

}; // struct RoadSegment_

typedef ::gl8_msgs::RoadSegment_<std::allocator<void> > RoadSegment;

typedef boost::shared_ptr< ::gl8_msgs::RoadSegment > RoadSegmentPtr;
typedef boost::shared_ptr< ::gl8_msgs::RoadSegment const> RoadSegmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gl8_msgs::RoadSegment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gl8_msgs::RoadSegment_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gl8_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'gl8_msgs': ['/home/hl/google/src/gl8_msgs /msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gl8_msgs::RoadSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gl8_msgs::RoadSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gl8_msgs::RoadSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gl8_msgs::RoadSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gl8_msgs::RoadSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gl8_msgs::RoadSegment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gl8_msgs::RoadSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66a128b28bfec83dd3150626355d56af";
  }

  static const char* value(const ::gl8_msgs::RoadSegment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66a128b28bfec83dULL;
  static const uint64_t static_value2 = 0xd3150626355d56afULL;
};

template<class ContainerAllocator>
struct DataType< ::gl8_msgs::RoadSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gl8_msgs/RoadSegment";
  }

  static const char* value(const ::gl8_msgs::RoadSegment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gl8_msgs::RoadSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool type \n\
# if the road segment is line, the value of type is 0;\n\
# if the road segment is curve, the value of type is 1; \n\
float64 length\n\
Point2D origin\n\
Point2D terminus\n\
# below parameters are for curve segments\n\
# if the road turns counterclockwise, then turn_direction is 0\n\
# if the road turns clockwise, then turn_direction is 1\n\
bool turn_direction\n\
Point2D center\n\
float64 radius\n\
Vector2 start_direction\n\
Vector2 end_direction\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: gl8_msgs/Point2D\n\
float64 x\n\
float64 y\n\
\n\
================================================================================\n\
MSG: gl8_msgs/Vector2\n\
float64 x\n\
float64 y\n\
";
  }

  static const char* value(const ::gl8_msgs::RoadSegment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gl8_msgs::RoadSegment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.length);
      stream.next(m.origin);
      stream.next(m.terminus);
      stream.next(m.turn_direction);
      stream.next(m.center);
      stream.next(m.radius);
      stream.next(m.start_direction);
      stream.next(m.end_direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadSegment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gl8_msgs::RoadSegment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gl8_msgs::RoadSegment_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::gl8_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "terminus: ";
    s << std::endl;
    Printer< ::gl8_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.terminus);
    s << indent << "turn_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_direction);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::gl8_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "start_direction: ";
    s << std::endl;
    Printer< ::gl8_msgs::Vector2_<ContainerAllocator> >::stream(s, indent + "  ", v.start_direction);
    s << indent << "end_direction: ";
    s << std::endl;
    Printer< ::gl8_msgs::Vector2_<ContainerAllocator> >::stream(s, indent + "  ", v.end_direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GL8_MSGS_MESSAGE_ROADSEGMENT_H
